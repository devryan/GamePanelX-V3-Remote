#!/bin/bash
#
# GamePanelX
# Remote scripts v3.0.14
#
# Update a Game/Voice server
#

#
# Example usage:
# ./UpdateServer -u user123 -t game -i 192.168.10.10 -p 27015 -o './steam -command update ...'
#
srv_username=
srv_ip=
srv_port=
srv_pidfile=
update_cmd=
callback_url=
cback="wget -qO-"
steam_game=
steam_login_user=
steam_login_pass=
steam_login_code=

while getopts "u:i:p:P:o:c:g:d:e:f:" OPTION
do
     case $OPTION in
        u)
             	srv_username=$OPTARG
             	;;
        i)
             	srv_ip=$OPTARG
             	;;
        p)
             	srv_port=$OPTARG
             	;;
        P)
             	srv_pidfile=$OPTARG
             	;;
        o)
             	update_cmd=$OPTARG
             	;;
        c)
             	callback_url=$OPTARG
             	;;
        g)
                steam_game=$OPTARG
                ;;
        d)
                steam_login_user=$OPTARG
                ;;
        e)
                steam_login_pass=$OPTARG
                ;;
        f)
                steam_login_code=$OPTARG
                ;;
        ?)
             	exit
             	;;
     esac
done

if [[ "$srv_username" == "" || "$srv_ip" == "" || "$srv_port" == "" || "$update_cmd" == "" ]]
then
    echo "UpdateServer: Required settings were left out. Exiting."
    exit
fi

# Stop server, suppress "success" message
/usr/local/gpx/bin/Stop -u $srv_username -i $srv_ip -p $srv_port 2>&1 >> /dev/null

# Update callback
if [ "$callback_url" ]; then $cback "$callback_url&do=createsrv_status&status=updating" >> /dev/null; fi

# Setup
gpxdir=/usr/local/gpx/users/$srv_username/$srv_ip\-$srv_port
serverlog=/usr/local/gpx/logs/servers.log
#updatelog=$gpxdir/.gpxupdate.log
#echo > $updatelog
updatelog=$serverlog

# Real logging
echo "$(date) $(hostname) Update: Updating server $srv_ip-$srv_port for user $srv_username, in dir $gpxdir ..." >> $serverlog

# Move to correct directory
cd $gpxdir

################################

# Begin SteamCMD update
. /usr/local/gpx/bin/SteamCMDFunctions
steamcmd_update $steam_game

#################################

# Start checking if update is complete
if [ "$callback_url" ]
then
	# Check if complete
	while [ true ]
	do
		# PID doesnt exist? Fail...
		if [ "$pid" == "" ]
		then
			echo "$(date) $(hostname) Update failed: No PID for update process found.  Screen PID was: $screen_pid.  Exiting. ($(date))" >> $updatelog
			$cback "$callback_url&do=createsrv_status&status=failed" >> /dev/null
			break
		# Completed
		elif [[ "$pid" && ! -e /proc/$pid ]]
                then
			echo "$(date) $(hostname) Update: Success: Update completed.  ($(date))" >> $updatelog
                        $cback "$callback_url&do=createsrv_status&status=complete" >> /dev/null

			echo "$(date) $(hostname) Update: Server update completed on $srv_ip-$srv_port for user $srv_username." >> $serverlog

                        break
		# Still running, wait...
		elif [[ "$pid" && -e /proc/$pid ]]
		then
			sleep 5
	    	# Something else happened
	    	else
			echo "$(date) $(hostname) Update failed: Something odd happened.  Screen PID was: $screen_pid, update PID was: $pid.  Exiting. ($(date))" >> $updatelog
			 echo "$(date) $(hostname) Update: Failed on $srv_ip-$srv_port for user $srv_username: Something odd happened.  Screen PID was: $screen_pid, update PID was: $pid.  Exiting." >> $serverlog

	        	$cback "$callback_url&do=createsrv_status&status=failed" >> /dev/null
                        break
	    	fi
	done >> /dev/null 2>&1 &
fi

echo "success"
